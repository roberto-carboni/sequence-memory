{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","spoken","setSpoken","seqLengt","setSeqLength","sequence","setSequence","showSequence","setShowSequence","allowedTime","setAllowedTime","timeLeft","setTimeLeft","answers","setAnswers","timer","useRef","undefined","generateSequence","newSequence","newAnswers","i","number","Math","floor","random","push","speakSequence","clearTimeout","current","utterance","SpeechSynthesisUtterance","join","onend","countdown","speechSynthesis","speak","setInterval","prev","clearInterval","useEffect","hideableItemsVisibility","className","style","marginBottom","Grid","component","container","alignItems","spacing","item","Button","variant","color","onClick","Typography","id","gutterBottom","Slider","defaultValue","value","valueLabelDisplay","step","marks","min","max","onChange","_","newValue","visibility","map","type","e","index","parseInt","setAnswer","target","disabled","resultStyle","green","fontSize","width","margin","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.044ed930.chunk.js","sourcesContent":["import { ReactNode, useEffect, useRef, useState } from 'react';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\nimport green from '@material-ui/core/colors/green';\nimport './App.css';\nimport { Button, Grid, Slider, Typography } from '@material-ui/core';\n\nfunction App() {\n  const [spoken, setSpoken] = useState(false);\n  const [seqLengt, setSeqLength] = useState<number>(6);\n  const [sequence, setSequence] = useState<number[]>([]);\n  const [showSequence, setShowSequence] = useState(true);\n  const [allowedTime, setAllowedTime] = useState(30);\n  const [timeLeft, setTimeLeft] = useState(allowedTime);\n  const [answers, setAnswers] = useState<(number | undefined)[]>([]);\n\n  let timer = useRef<any>(undefined);\n\n  const generateSequence = () => {\n    const newSequence = [];\n    const newAnswers = [];\n    for (let i = 0; i < seqLengt; i++) {\n      const number = Math.floor(Math.random() * 100);\n      newSequence.push(number);\n      newAnswers.push(undefined);\n    }\n    setShowSequence(true);\n    setSequence(newSequence);\n    setAnswers(newAnswers);\n    setTimeLeft(allowedTime);\n    if (spoken) {\n      speakSequence(newSequence);\n    }\n  };\n\n  const speakSequence = (newSequence: number[]) => {\n    clearTimeout(timer.current);\n    setTimeLeft(allowedTime);\n    const utterance = new SpeechSynthesisUtterance(\n      `${newSequence.join('. ')}.`\n    );\n    utterance.onend = () => {\n      countdown();\n    };\n\n    speechSynthesis.speak(utterance);\n  };\n\n  const revealSequence = () => {\n    setShowSequence(true);\n  };\n\n  const renderSequence = () => {\n    return sequence.join(' - ');\n  };\n\n  const setAnswer = (newValue: string, index: number) => {\n    const newAnswers = [...answers];\n    newAnswers[index] = parseInt(newValue);\n    setAnswers(newAnswers);\n  };\n\n  const renderAnswers = (): ReactNode[] =>\n    sequence.map((_, i) => {\n      return (\n        <input\n          type='number'\n          className='answer-input'\n          id={`${i}`}\n          key={i}\n          onChange={(e) => setAnswer(e.target.value, i)}\n          disabled={showSequence}\n        />\n      );\n    });\n\n  const renderResults = (): ReactNode[] =>\n    sequence.map((number, index) => {\n      if (number === answers[index]) {\n        return (\n          <CheckCircleOutlineIcon\n            style={{ ...resultStyle, color: green[500] }}\n            fontSize='large'\n            key={index}\n          />\n        );\n      }\n      return (\n        <HighlightOffIcon\n          color='error'\n          fontSize='large'\n          style={{ ...resultStyle }}\n          key={index}\n        />\n      );\n    });\n\n  const countdown = () => {\n    setTimeLeft(allowedTime);\n    timer.current = setInterval(() => {\n      if (timeLeft > 0) {\n        setTimeLeft((prev) => (prev > 0 ? prev - 1 : 0));\n      } else {\n        clearInterval(timer.current);\n      }\n    }, 1000);\n  };\n\n  useEffect(() => {\n    if (timeLeft === 0) {\n      setShowSequence(false);\n    }\n  }, [timeLeft]);\n\n  useEffect(() => {\n    generateSequence();\n    if (!spoken) {\n      countdown();\n    } else {\n      setShowSequence(false);\n    }\n  }, [spoken]);\n\n  const hideableItemsVisibility = timeLeft > 0 ? 'hidden' : 'initial';\n\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <div style={{ marginBottom: '20px' }}>\n          <Grid\n            component='label'\n            container\n            alignItems='center'\n            spacing={3}\n            style={{ marginBottom: '20px' }}\n          >\n            <Grid item>\n              <Button\n                variant={spoken ? 'outlined' : 'contained'}\n                color='primary'\n                onClick={() => {\n                  if (spoken) {\n                    setSpoken(false);\n                  }\n                }}\n              >\n                Display\n              </Button>\n            </Grid>\n\n            <Grid item>\n              <Button\n                variant={spoken ? 'contained' : 'outlined'}\n                color='secondary'\n                onClick={() => {\n                  if (!spoken) {\n                    setSpoken(true);\n                  }\n                }}\n              >\n                Speak\n              </Button>\n            </Grid>\n          </Grid>\n\n          <Typography id='seq-length-slider' gutterBottom>\n            Sequence Length\n          </Typography>\n          <Slider\n            defaultValue={seqLengt}\n            value={seqLengt}\n            valueLabelDisplay='auto'\n            step={1}\n            marks\n            min={4}\n            max={14}\n            onChange={(_, newValue) => setSeqLength(newValue as number)}\n          />\n          <Typography id='countdown-duration-slider' gutterBottom>\n            {`${spoken ? 'Lapsed' : 'Memorizing'} Time (secs):`}\n          </Typography>\n          <Slider\n            defaultValue={seqLengt}\n            value={allowedTime}\n            valueLabelDisplay='auto'\n            step={5}\n            marks\n            min={5}\n            max={60}\n            onChange={(_, newValue) => setAllowedTime(newValue as number)}\n          />\n        </div>\n        <Button\n          variant='contained'\n          color='secondary'\n          onClick={generateSequence}\n        >\n          Generate New\n        </Button>\n\n        <p\n          style={{\n            visibility: showSequence ? 'initial' : 'hidden',\n          }}\n        >\n          {renderSequence()}\n        </p>\n\n        <div\n          className='answer-container'\n          style={{ visibility: hideableItemsVisibility }}\n        >\n          {renderAnswers()}\n        </div>\n        <div\n          className='answer-container'\n          style={{\n            visibility: timeLeft === 0 && showSequence ? 'initial' : 'hidden',\n          }}\n        >\n          {renderResults()}\n        </div>\n\n        <p>Time remaining: {timeLeft}</p>\n\n        <Button\n          variant='contained'\n          color='primary'\n          onClick={revealSequence}\n          style={{\n            visibility: timeLeft === 0 && !showSequence ? 'initial' : 'hidden',\n          }}\n        >\n          Reveal\n        </Button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\nconst resultStyle = {\n  width: '1.7rem',\n  margin: '0 14px',\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}